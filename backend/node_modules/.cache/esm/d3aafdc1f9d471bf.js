let jwt,User,transporter,getPasswordResetURL,resetPasswordTemplate;_f9d‍.x([["sendPasswordResetEmail",()=>sendPasswordResetEmail],["receiveNewPassword",()=>receiveNewPassword]]);_f9d‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_f9d‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);_f9d‍.w("../../lib/email",[["transporter",["transporter"],function(v){transporter=v}],["getPasswordResetURL",["getPasswordResetURL"],function(v){getPasswordResetURL=v}],["resetPasswordTemplate",["resetPasswordTemplate"],function(v){resetPasswordTemplate=v}]]);







// 이메일 발송 API 
       const sendPasswordResetEmail = async (ctx) => {
    
    try{
        const { email } = ctx.request.body; 
        const user = await User.findByEmail(email).exec();
        const token = user.generateToken();
        const url = getPasswordResetURL(user,token);
        const emailTemplate = resetPasswordTemplate(user,url);
        const sendEmail = () => {
            transporter.sendMail(emailTemplate, (err,info) => {
                if(err){
                    ctx.throw(500,err);
                }
                _f9d‍.g.console.log(`** 이메일 발송 성공 **`, info.response);
            });
        }
        sendEmail();   
        ctx.body = user;
    }catch (err) {
        ctx.status = 404;
    }
}

// 비밀번호 변경 API
       const receiveNewPassword = async (ctx) => {
    const { token, userId } =ctx.params;
    const { password } = ctx.request.body;
    const user = await User.findById({_id:userId});

    if(user){
        const secret = '!@#$%^&*()';
        const payload = jwt.decode(token,secret);
        
        if(payload._id === user.id){
            user.hashedpassword = password;
            user.save();
        }

    }else{
        ctx.status = 401;
    }
}